#ifndef PNEUMATICPRESSUREACTIVATION_HPP_INCLUDED
#define PNEUMATICPRESSUREACTIVATION_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file PneumaticPressureActivation.hpp
//! @author Petter Krus <petter.krus@liu.se>
//  co-author/auditor **Not yet audited by a second person**
//! @date Sat 15 Aug 2020 11:17:35
//! @brief Pneumatic pressure activation
//! @ingroup PneumaticComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, H:, PettersDropbox, Dropbox, HopsanComponents, \
PneumaticDevelop}/PneumaticPressureActivation.nb*/

using namespace hopsan;

class PneumaticPressureActivation : public ComponentQ
{
private:
     double pso;
     double psmax;
     Port *mpP1;
     int mNstep;
     //Port P1 variable
     double p1;
     double qm1;
     double T1;
     double dE1;
     double c1;
     double Zc1;
//==This code has been autogenerated using Compgen==
     //inputVariables
     //outputVariables
     double u;
     //LocalExpressions variables
     //Expressions variables
     //Port P1 pointer
     double *mpP_p1;
     double *mpP_qm1;
     double *mpP_T1;
     double *mpP_dE1;
     double *mpP_c1;
     double *mpP_Zc1;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     //inputParameters pointers
     double *mppso;
     double *mppsmax;
     //outputVariables pointers
     double *mpu;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new PneumaticPressureActivation();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;

        //Add ports to the component
        mpP1=addPowerPort("P1","NodePneumatic");
        //Add inputVariables to the component

        //Add inputParammeters to the component
            addInputVariable("pso", "Opening pressure", "Pa", \
800000.,&mppso);
            addInputVariable("psmax", "Fully open pressure", "Pa", \
900000.,&mppsmax);
        //Add outputVariables to the component
            addOutputVariable("u","Activation signal, 0<u<1","",0.,&mpu);

//==This code has been autogenerated using Compgen==
        //Add constantParameters
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port P1
        mpP_p1=getSafeNodeDataPtr(mpP1, NodePneumatic::Pressure);
        mpP_qm1=getSafeNodeDataPtr(mpP1, NodePneumatic::MassFlow);
        mpP_T1=getSafeNodeDataPtr(mpP1, NodePneumatic::Temperature);
        mpP_dE1=getSafeNodeDataPtr(mpP1, NodePneumatic::EnergyFlow);
        mpP_c1=getSafeNodeDataPtr(mpP1, NodePneumatic::WaveVariable);
        mpP_Zc1=getSafeNodeDataPtr(mpP1, NodePneumatic::CharImpedance);

        //Read variables from nodes
        //Port P1
        p1 = (*mpP_p1);
        qm1 = (*mpP_qm1);
        T1 = (*mpP_T1);
        dE1 = (*mpP_dE1);
        c1 = (*mpP_c1);
        Zc1 = (*mpP_Zc1);

        //Read inputVariables from nodes

        //Read inputParameters from nodes
        pso = (*mppso);
        psmax = (*mppsmax);

        //Read outputVariables from nodes
        u = (*mpu);

//==This code has been autogenerated using Compgen==

        //LocalExpressions
        p1 = c1;

        //Initialize delays


        simulateOneTimestep();

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes
        //Port P1
        T1 = (*mpP_T1);
        c1 = (*mpP_c1);
        Zc1 = (*mpP_Zc1);

        //Read inputVariables from nodes

        //Read inputParameters from nodes
        pso = (*mppso);
        psmax = (*mppsmax);

        //LocalExpressions
        p1 = c1;

        //Expressions
        u = limit((p1 - pso)/(psmax - pso),0,1);

        //Calculate the delayed parts


        //Write new values to nodes
        //Port P1
        (*mpP_p1)=p1;
        (*mpP_qm1)=qm1;
        (*mpP_dE1)=dE1;
        //outputVariables
        (*mpu)=u;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // PNEUMATICPRESSUREACTIVATION_HPP_INCLUDED
