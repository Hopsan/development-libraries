#ifndef PNEUMATICVALVE33_HPP_INCLUDED
#define PNEUMATICVALVE33_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file PneumaticValve33.hpp
//! @author Petter Krus <petter.krus@liu.se>
//  co-author/auditor **Not yet audited by a second person**
//! @date Wed 5 Aug 2020 15:54:56
//! @brief Pneumatic 33-valve
//! @ingroup PneumaticComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, H:, PettersDropbox, Dropbox, HopsanComponents, PneumaticDevelop, \
PneumaticComponents}/PneumaticValve33.nb*/

using namespace hopsan;

class PneumaticValve33 : public ComponentQ
{
private:
     double Bf;
     double Cf;
     double x0;
     double p0;
     double T0;
     double R;
     double cv;
     double eps;
     Port *mpP1;
     Port *mpP2;
     Port *mpP3;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     double delayParts5[9];
     double delayParts6[9];
     double delayParts7[9];
     double delayParts8[9];
     double delayParts9[9];
     double delayParts10[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[10];
     int mNstep;
     //Port P1 variable
     double p1;
     double qm1;
     double T1;
     double dE1;
     double c1;
     double Zc1;
     //Port P2 variable
     double p2;
     double qm2;
     double T2;
     double dE2;
     double c2;
     double Zc2;
     //Port P3 variable
     double p3;
     double qm3;
     double T3;
     double dE3;
     double c3;
     double Zc3;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double xin;
     //outputVariables
     double qm12Pos;
     double qm12Neg;
     double qm32Pos;
     double qm32Neg;
     double Ng32e;
     double Ng12e;
     //LocalExpressions variables
     double cp;
     //Expressions variables
     //Port P1 pointer
     double *mpP_p1;
     double *mpP_qm1;
     double *mpP_T1;
     double *mpP_dE1;
     double *mpP_c1;
     double *mpP_Zc1;
     //Port P2 pointer
     double *mpP_p2;
     double *mpP_qm2;
     double *mpP_T2;
     double *mpP_dE2;
     double *mpP_c2;
     double *mpP_Zc2;
     //Port P3 pointer
     double *mpP_p3;
     double *mpP_qm3;
     double *mpP_T3;
     double *mpP_dE3;
     double *mpP_c3;
     double *mpP_Zc3;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpxin;
     //inputParameters pointers
     double *mpBf;
     double *mpCf;
     double *mpx0;
     double *mpp0;
     double *mpT0;
     double *mpR;
     double *mpcv;
     double *mpeps;
     //outputVariables pointers
     double *mpqm12Pos;
     double *mpqm12Neg;
     double *mpqm32Pos;
     double *mpqm32Neg;
     double *mpNg32e;
     double *mpNg12e;
     Delay mDelayedPart10;
     Delay mDelayedPart20;
     Delay mDelayedPart30;
     Delay mDelayedPart40;
     Delay mDelayedPart50;
     Delay mDelayedPart60;
     Delay mDelayedPart70;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new PneumaticValve33();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(10,10);
        systemEquations.create(10);
        delayedPart.create(11,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        mpP1=addPowerPort("P1","NodePneumatic");
        mpP2=addPowerPort("P2","NodePneumatic");
        mpP3=addPowerPort("P3","NodePneumatic");
        //Add inputVariables to the component
            addInputVariable("xin","Input signal 0<xin<1","",1,&mpxin);

        //Add inputParammeters to the component
            addInputVariable("Bf", "B, ISO critical pressure ratio", "", \
0.528,&mpBf);
            addInputVariable("Cf", "C, ISO flow coefficient", "", \
1.e-13,&mpCf);
            addInputVariable("x0", "Relative overlap", "", 0.1,&mpx0);
            addInputVariable("p0", "Nominal pressure", "Pa", 100000.,&mpp0);
            addInputVariable("T0", "Nominal temperature", "K", 297.,&mpT0);
            addInputVariable("R", "Gas constant", "J/Kg K", 287.,&mpR);
            addInputVariable("cv", "heatcoeff", "J/Kg K", 718,&mpcv);
            addInputVariable("eps", "Linearisation coeff", "", 0.02,&mpeps);
        //Add outputVariables to the component
            addOutputVariable("qm12Pos","Internal \
variable","kg/s",0.,&mpqm12Pos);
            addOutputVariable("qm12Neg","Internal \
variable","kg/s",0.,&mpqm12Neg);
            addOutputVariable("qm32Pos","Internal \
variable","kg/s",0.,&mpqm32Pos);
            addOutputVariable("qm32Neg","Internal \
variable","kg/s",0.,&mpqm32Neg);
            addOutputVariable("Ng32e","Internal variable","",0.,&mpNg32e);
            addOutputVariable("Ng12e","Internal variable","",0.,&mpNg12e);

//==This code has been autogenerated using Compgen==
        //Add constantParameters
        mpSolver = new EquationSystemSolver(this,10);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port P1
        mpP_p1=getSafeNodeDataPtr(mpP1, NodePneumatic::Pressure);
        mpP_qm1=getSafeNodeDataPtr(mpP1, NodePneumatic::MassFlow);
        mpP_T1=getSafeNodeDataPtr(mpP1, NodePneumatic::Temperature);
        mpP_dE1=getSafeNodeDataPtr(mpP1, NodePneumatic::EnergyFlow);
        mpP_c1=getSafeNodeDataPtr(mpP1, NodePneumatic::WaveVariable);
        mpP_Zc1=getSafeNodeDataPtr(mpP1, NodePneumatic::CharImpedance);
        //Port P2
        mpP_p2=getSafeNodeDataPtr(mpP2, NodePneumatic::Pressure);
        mpP_qm2=getSafeNodeDataPtr(mpP2, NodePneumatic::MassFlow);
        mpP_T2=getSafeNodeDataPtr(mpP2, NodePneumatic::Temperature);
        mpP_dE2=getSafeNodeDataPtr(mpP2, NodePneumatic::EnergyFlow);
        mpP_c2=getSafeNodeDataPtr(mpP2, NodePneumatic::WaveVariable);
        mpP_Zc2=getSafeNodeDataPtr(mpP2, NodePneumatic::CharImpedance);
        //Port P3
        mpP_p3=getSafeNodeDataPtr(mpP3, NodePneumatic::Pressure);
        mpP_qm3=getSafeNodeDataPtr(mpP3, NodePneumatic::MassFlow);
        mpP_T3=getSafeNodeDataPtr(mpP3, NodePneumatic::Temperature);
        mpP_dE3=getSafeNodeDataPtr(mpP3, NodePneumatic::EnergyFlow);
        mpP_c3=getSafeNodeDataPtr(mpP3, NodePneumatic::WaveVariable);
        mpP_Zc3=getSafeNodeDataPtr(mpP3, NodePneumatic::CharImpedance);

        //Read variables from nodes
        //Port P1
        p1 = (*mpP_p1);
        qm1 = (*mpP_qm1);
        T1 = (*mpP_T1);
        dE1 = (*mpP_dE1);
        c1 = (*mpP_c1);
        Zc1 = (*mpP_Zc1);
        //Port P2
        p2 = (*mpP_p2);
        qm2 = (*mpP_qm2);
        T2 = (*mpP_T2);
        dE2 = (*mpP_dE2);
        c2 = (*mpP_c2);
        Zc2 = (*mpP_Zc2);
        //Port P3
        p3 = (*mpP_p3);
        qm3 = (*mpP_qm3);
        T3 = (*mpP_T3);
        dE3 = (*mpP_dE3);
        c3 = (*mpP_c3);
        Zc3 = (*mpP_Zc3);

        //Read inputVariables from nodes
        xin = (*mpxin);

        //Read inputParameters from nodes
        Bf = (*mpBf);
        Cf = (*mpCf);
        x0 = (*mpx0);
        p0 = (*mpp0);
        T0 = (*mpT0);
        R = (*mpR);
        cv = (*mpcv);
        eps = (*mpeps);

        //Read outputVariables from nodes
        qm12Pos = (*mpqm12Pos);
        qm12Neg = (*mpqm12Neg);
        qm32Pos = (*mpqm32Pos);
        qm32Neg = (*mpqm32Neg);
        Ng32e = (*mpNg32e);
        Ng12e = (*mpNg12e);

//==This code has been autogenerated using Compgen==

        //LocalExpressions
        cp = cv + R;

        //Initialize delays

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];
        delayedPart[8][1] = delayParts8[1];
        delayedPart[9][1] = delayParts9[1];
        delayedPart[10][1] = delayParts10[1];

        simulateOneTimestep();

     }
    void simulateOneTimestep()
     {
        Vec stateVar(10);
        Vec stateVark(10);
        Vec deltaStateVar(10);

        //Read variables from nodes
        //Port P1
        T1 = (*mpP_T1);
        c1 = (*mpP_c1);
        Zc1 = (*mpP_Zc1);
        //Port P2
        T2 = (*mpP_T2);
        c2 = (*mpP_c2);
        Zc2 = (*mpP_Zc2);
        //Port P3
        T3 = (*mpP_T3);
        c3 = (*mpP_c3);
        Zc3 = (*mpP_Zc3);

        //Read inputVariables from nodes
        xin = (*mpxin);

        //Read inputParameters from nodes
        Bf = (*mpBf);
        Cf = (*mpCf);
        x0 = (*mpx0);
        p0 = (*mpp0);
        T0 = (*mpT0);
        R = (*mpR);
        cv = (*mpcv);
        eps = (*mpeps);

        //LocalExpressions
        cp = cv + R;

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = qm12Pos;
        stateVark[1] = qm12Neg;
        stateVark[2] = qm32Pos;
        stateVark[3] = qm32Neg;
        stateVark[4] = dE2;
        stateVark[5] = dE1;
        stateVark[6] = dE3;
        stateVark[7] = p2;
        stateVark[8] = p1;
        stateVark[9] = p3;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //Valve33
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =qm12Pos - Cf*p0*p1*Sqrt(T0/T1)*limit((x0 - \
xin)/(-1 + x0),0,1)*(onNegative(-Bf + p1/p2)*onNegative(p1 - p2) + \
onNegative(-Bf + p2/p1)*onPositive(p1 - p2) + onPositive(p1 - \
p2)*onPositive(-Bf + p2/p1)*signedSquareL(1 - Power(-(Bf*p1) + \
p2,2)/(Power(-1 + Bf,2)*Power(p1,2)),eps) + onNegative(p1 - \
p2)*onPositive(-Bf + p1/p2)*signedSquareL(1 - Power(p1 - Bf*p2,2)/(Power(-1 + \
Bf,2)*Power(p2,2)),eps));
          systemEquations[1] =qm12Neg - Cf*p0*p2*Sqrt(T0/T2)*limit((x0 - \
xin)/(-1 + x0),0,1)*(onNegative(-Bf + p1/p2)*onNegative(p1 - p2) + \
onNegative(-Bf + p2/p1)*onPositive(p1 - p2) + onPositive(p1 - \
p2)*onPositive(-Bf + p2/p1)*signedSquareL(1 - Power(-(Bf*p1) + \
p2,2)/(Power(-1 + Bf,2)*Power(p1,2)),eps) + onNegative(p1 - \
p2)*onPositive(-Bf + p1/p2)*signedSquareL(1 - Power(p1 - Bf*p2,2)/(Power(-1 + \
Bf,2)*Power(p2,2)),eps));
          systemEquations[2] =qm32Pos - Cf*p0*p3*Sqrt(T0/T3)*limit((x0 + \
xin)/(-1 + x0),0,1)*(onNegative(-p2 + p3)*(onNegative(-Bf + p3/p2) + \
onPositive(-Bf + p3/p2)*signedSquareL(1 - Power(-(Bf*p2) + p3,2)/(Power(-1 + \
Bf,2)*Power(p2,2)),eps)) + onPositive(-p2 + p3)*(onNegative(-Bf + p2/p3) + \
onPositive(-Bf + p2/p3)*signedSquareL(1 - Power(p2 - Bf*p3,2)/(Power(-1 + \
Bf,2)*Power(p3,2)),eps)));
          systemEquations[3] =qm32Neg - Cf*p0*p2*Sqrt(T0/T2)*limit((x0 + \
xin)/(-1 + x0),0,1)*(onNegative(-p2 + p3)*(onNegative(-Bf + p3/p2) + \
onPositive(-Bf + p3/p2)*signedSquareL(1 - Power(-(Bf*p2) + p3,2)/(Power(-1 + \
Bf,2)*Power(p2,2)),eps)) + onPositive(-p2 + p3)*(onNegative(-Bf + p2/p3) + \
onPositive(-Bf + p2/p3)*signedSquareL(1 - Power(p2 - Bf*p3,2)/(Power(-1 + \
Bf,2)*Power(p3,2)),eps)));
          systemEquations[4] =dE2 + \
cp*(-(qm12Pos*T2*onNegative(-(qm12Neg*onNegative(p1 - p2)) + \
qm12Pos*onPositive(p1 - p2))*onPositive(p1 - p2)) - \
qm32Pos*T2*onNegative(-(qm32Neg*onNegative(-p2 + p3)) + \
qm32Pos*onPositive(-p2 + p3))*onPositive(-p2 + p3) - qm12Pos*T1*onPositive(p1 \
- p2)*onPositive(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2)) + qm12Neg*onNegative(p1 - p2)*(T2*onNegative(-(qm12Neg*onNegative(p1 - \
p2)) + qm12Pos*onPositive(p1 - p2)) + T1*onPositive(-(qm12Neg*onNegative(p1 - \
p2)) + qm12Pos*onPositive(p1 - p2))) - qm32Pos*T3*onPositive(-p2 + \
p3)*onPositive(-(qm32Neg*onNegative(-p2 + p3)) + qm32Pos*onPositive(-p2 + \
p3)) + qm32Neg*onNegative(-p2 + p3)*(T2*onNegative(-(qm32Neg*onNegative(-p2 + \
p3)) + qm32Pos*onPositive(-p2 + p3)) + T3*onPositive(-(qm32Neg*onNegative(-p2 \
+ p3)) + qm32Pos*onPositive(-p2 + p3))));
          systemEquations[5] =dE1 - cp*(qm12Neg*onNegative(p1 - p2) - \
qm12Pos*onPositive(p1 - p2))*(T2*onNegative(-(qm12Neg*onNegative(p1 - p2)) + \
qm12Pos*onPositive(p1 - p2)) + T1*onPositive(-(qm12Neg*onNegative(p1 - p2)) + \
qm12Pos*onPositive(p1 - p2)));
          systemEquations[6] =dE3 - cp*(qm32Neg*onNegative(-p2 + p3) - \
qm32Pos*onPositive(-p2 + p3))*(T2*onNegative(-(qm32Neg*onNegative(-p2 + p3)) \
+ qm32Pos*onPositive(-p2 + p3)) + T3*onPositive(-(qm32Neg*onNegative(-p2 + \
p3)) + qm32Pos*onPositive(-p2 + p3)));
          systemEquations[7] =-c2 + p2 - dE2*Zc2;
          systemEquations[8] =-c1 + p1 - dE1*Zc1;
          systemEquations[9] =-c3 + p3 - dE3*Zc3;

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
          jacobianMatrix[0][1] = 0;
          jacobianMatrix[0][2] = 0;
          jacobianMatrix[0][3] = 0;
          jacobianMatrix[0][4] = 0;
          jacobianMatrix[0][5] = 0;
          jacobianMatrix[0][6] = 0;
          jacobianMatrix[0][7] = -(Cf*p0*p1*Sqrt(T0/T1)*limit((x0 - xin)/(-1 \
+ x0),0,1)*(((2*Bf*(p1 - Bf*p2))/(Power(-1 + Bf,2)*Power(p2,2)) + (2*Power(p1 \
- Bf*p2,2))/(Power(-1 + Bf,2)*Power(p2,3)))*dxSignedSquareL(1 - Power(p1 - \
Bf*p2,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(p1 - \
p2)*onPositive(-Bf + p1/p2) - (2*(-(Bf*p1) + p2)*dxSignedSquareL(1 - \
Power(-(Bf*p1) + p2,2)/(Power(-1 + Bf,2)*Power(p1,2)),eps)*onPositive(p1 - \
p2)*onPositive(-Bf + p2/p1))/(Power(-1 + Bf,2)*Power(p1,2))));
          jacobianMatrix[0][8] = -(Cf*p0*p1*Sqrt(T0/T1)*limit((x0 - xin)/(-1 \
+ x0),0,1)*((-2*(p1 - Bf*p2)*dxSignedSquareL(1 - Power(p1 - \
Bf*p2,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(p1 - \
p2)*onPositive(-Bf + p1/p2))/(Power(-1 + Bf,2)*Power(p2,2)) + \
((2*Bf*(-(Bf*p1) + p2))/(Power(-1 + Bf,2)*Power(p1,2)) + (2*Power(-(Bf*p1) + \
p2,2))/(Power(-1 + Bf,2)*Power(p1,3)))*dxSignedSquareL(1 - Power(-(Bf*p1) + \
p2,2)/(Power(-1 + Bf,2)*Power(p1,2)),eps)*onPositive(p1 - p2)*onPositive(-Bf \
+ p2/p1))) - Cf*p0*Sqrt(T0/T1)*limit((x0 - xin)/(-1 + \
x0),0,1)*(onNegative(-Bf + p1/p2)*onNegative(p1 - p2) + onNegative(-Bf + \
p2/p1)*onPositive(p1 - p2) + onPositive(p1 - p2)*onPositive(-Bf + \
p2/p1)*signedSquareL(1 - Power(-(Bf*p1) + p2,2)/(Power(-1 + \
Bf,2)*Power(p1,2)),eps) + onNegative(p1 - p2)*onPositive(-Bf + \
p1/p2)*signedSquareL(1 - Power(p1 - Bf*p2,2)/(Power(-1 + \
Bf,2)*Power(p2,2)),eps));
          jacobianMatrix[0][9] = 0;
          jacobianMatrix[1][0] = 0;
          jacobianMatrix[1][1] = 1;
          jacobianMatrix[1][2] = 0;
          jacobianMatrix[1][3] = 0;
          jacobianMatrix[1][4] = 0;
          jacobianMatrix[1][5] = 0;
          jacobianMatrix[1][6] = 0;
          jacobianMatrix[1][7] = -(Cf*p0*p2*Sqrt(T0/T2)*limit((x0 - xin)/(-1 \
+ x0),0,1)*(((2*Bf*(p1 - Bf*p2))/(Power(-1 + Bf,2)*Power(p2,2)) + (2*Power(p1 \
- Bf*p2,2))/(Power(-1 + Bf,2)*Power(p2,3)))*dxSignedSquareL(1 - Power(p1 - \
Bf*p2,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(p1 - \
p2)*onPositive(-Bf + p1/p2) - (2*(-(Bf*p1) + p2)*dxSignedSquareL(1 - \
Power(-(Bf*p1) + p2,2)/(Power(-1 + Bf,2)*Power(p1,2)),eps)*onPositive(p1 - \
p2)*onPositive(-Bf + p2/p1))/(Power(-1 + Bf,2)*Power(p1,2)))) - \
Cf*p0*Sqrt(T0/T2)*limit((x0 - xin)/(-1 + x0),0,1)*(onNegative(-Bf + \
p1/p2)*onNegative(p1 - p2) + onNegative(-Bf + p2/p1)*onPositive(p1 - p2) + \
onPositive(p1 - p2)*onPositive(-Bf + p2/p1)*signedSquareL(1 - Power(-(Bf*p1) \
+ p2,2)/(Power(-1 + Bf,2)*Power(p1,2)),eps) + onNegative(p1 - \
p2)*onPositive(-Bf + p1/p2)*signedSquareL(1 - Power(p1 - Bf*p2,2)/(Power(-1 + \
Bf,2)*Power(p2,2)),eps));
          jacobianMatrix[1][8] = -(Cf*p0*p2*Sqrt(T0/T2)*limit((x0 - xin)/(-1 \
+ x0),0,1)*((-2*(p1 - Bf*p2)*dxSignedSquareL(1 - Power(p1 - \
Bf*p2,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(p1 - \
p2)*onPositive(-Bf + p1/p2))/(Power(-1 + Bf,2)*Power(p2,2)) + \
((2*Bf*(-(Bf*p1) + p2))/(Power(-1 + Bf,2)*Power(p1,2)) + (2*Power(-(Bf*p1) + \
p2,2))/(Power(-1 + Bf,2)*Power(p1,3)))*dxSignedSquareL(1 - Power(-(Bf*p1) + \
p2,2)/(Power(-1 + Bf,2)*Power(p1,2)),eps)*onPositive(p1 - p2)*onPositive(-Bf \
+ p2/p1)));
          jacobianMatrix[1][9] = 0;
          jacobianMatrix[2][0] = 0;
          jacobianMatrix[2][1] = 0;
          jacobianMatrix[2][2] = 1;
          jacobianMatrix[2][3] = 0;
          jacobianMatrix[2][4] = 0;
          jacobianMatrix[2][5] = 0;
          jacobianMatrix[2][6] = 0;
          jacobianMatrix[2][7] = -(Cf*p0*p3*Sqrt(T0/T3)*limit((x0 + xin)/(-1 \
+ x0),0,1)*((-2*(p2 - Bf*p3)*dxSignedSquareL(1 - Power(p2 - \
Bf*p3,2)/(Power(-1 + Bf,2)*Power(p3,2)),eps)*onPositive(-Bf + \
p2/p3)*onPositive(-p2 + p3))/(Power(-1 + Bf,2)*Power(p3,2)) + \
((2*Bf*(-(Bf*p2) + p3))/(Power(-1 + Bf,2)*Power(p2,2)) + (2*Power(-(Bf*p2) + \
p3,2))/(Power(-1 + Bf,2)*Power(p2,3)))*dxSignedSquareL(1 - Power(-(Bf*p2) + \
p3,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(-p2 + p3)*onPositive(-Bf \
+ p3/p2)));
          jacobianMatrix[2][8] = 0;
          jacobianMatrix[2][9] = -(Cf*p0*p3*Sqrt(T0/T3)*limit((x0 + xin)/(-1 \
+ x0),0,1)*(((2*Bf*(p2 - Bf*p3))/(Power(-1 + Bf,2)*Power(p3,2)) + (2*Power(p2 \
- Bf*p3,2))/(Power(-1 + Bf,2)*Power(p3,3)))*dxSignedSquareL(1 - Power(p2 - \
Bf*p3,2)/(Power(-1 + Bf,2)*Power(p3,2)),eps)*onPositive(-Bf + \
p2/p3)*onPositive(-p2 + p3) - (2*(-(Bf*p2) + p3)*dxSignedSquareL(1 - \
Power(-(Bf*p2) + p3,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(-p2 + \
p3)*onPositive(-Bf + p3/p2))/(Power(-1 + Bf,2)*Power(p2,2)))) - \
Cf*p0*Sqrt(T0/T3)*limit((x0 + xin)/(-1 + x0),0,1)*(onNegative(-p2 + \
p3)*(onNegative(-Bf + p3/p2) + onPositive(-Bf + p3/p2)*signedSquareL(1 - \
Power(-(Bf*p2) + p3,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)) + onPositive(-p2 \
+ p3)*(onNegative(-Bf + p2/p3) + onPositive(-Bf + p2/p3)*signedSquareL(1 - \
Power(p2 - Bf*p3,2)/(Power(-1 + Bf,2)*Power(p3,2)),eps)));
          jacobianMatrix[3][0] = 0;
          jacobianMatrix[3][1] = 0;
          jacobianMatrix[3][2] = 0;
          jacobianMatrix[3][3] = 1;
          jacobianMatrix[3][4] = 0;
          jacobianMatrix[3][5] = 0;
          jacobianMatrix[3][6] = 0;
          jacobianMatrix[3][7] = -(Cf*p0*p2*Sqrt(T0/T2)*limit((x0 + xin)/(-1 \
+ x0),0,1)*((-2*(p2 - Bf*p3)*dxSignedSquareL(1 - Power(p2 - \
Bf*p3,2)/(Power(-1 + Bf,2)*Power(p3,2)),eps)*onPositive(-Bf + \
p2/p3)*onPositive(-p2 + p3))/(Power(-1 + Bf,2)*Power(p3,2)) + \
((2*Bf*(-(Bf*p2) + p3))/(Power(-1 + Bf,2)*Power(p2,2)) + (2*Power(-(Bf*p2) + \
p3,2))/(Power(-1 + Bf,2)*Power(p2,3)))*dxSignedSquareL(1 - Power(-(Bf*p2) + \
p3,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(-p2 + p3)*onPositive(-Bf \
+ p3/p2))) - Cf*p0*Sqrt(T0/T2)*limit((x0 + xin)/(-1 + \
x0),0,1)*(onNegative(-p2 + p3)*(onNegative(-Bf + p3/p2) + onPositive(-Bf + \
p3/p2)*signedSquareL(1 - Power(-(Bf*p2) + p3,2)/(Power(-1 + \
Bf,2)*Power(p2,2)),eps)) + onPositive(-p2 + p3)*(onNegative(-Bf + p2/p3) + \
onPositive(-Bf + p2/p3)*signedSquareL(1 - Power(p2 - Bf*p3,2)/(Power(-1 + \
Bf,2)*Power(p3,2)),eps)));
          jacobianMatrix[3][8] = 0;
          jacobianMatrix[3][9] = -(Cf*p0*p2*Sqrt(T0/T2)*limit((x0 + xin)/(-1 \
+ x0),0,1)*(((2*Bf*(p2 - Bf*p3))/(Power(-1 + Bf,2)*Power(p3,2)) + (2*Power(p2 \
- Bf*p3,2))/(Power(-1 + Bf,2)*Power(p3,3)))*dxSignedSquareL(1 - Power(p2 - \
Bf*p3,2)/(Power(-1 + Bf,2)*Power(p3,2)),eps)*onPositive(-Bf + \
p2/p3)*onPositive(-p2 + p3) - (2*(-(Bf*p2) + p3)*dxSignedSquareL(1 - \
Power(-(Bf*p2) + p3,2)/(Power(-1 + Bf,2)*Power(p2,2)),eps)*onNegative(-p2 + \
p3)*onPositive(-Bf + p3/p2))/(Power(-1 + Bf,2)*Power(p2,2))));
          jacobianMatrix[4][0] = cp*(-(T2*onNegative(-(qm12Neg*onNegative(p1 \
- p2)) + qm12Pos*onPositive(p1 - p2))*onPositive(p1 - p2)) - T1*onPositive(p1 \
- p2)*onPositive(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2)));
          jacobianMatrix[4][1] = cp*onNegative(p1 - \
p2)*(T2*onNegative(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2)) + T1*onPositive(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2)));
          jacobianMatrix[4][2] = cp*(-(T2*onNegative(-(qm32Neg*onNegative(-p2 \
+ p3)) + qm32Pos*onPositive(-p2 + p3))*onPositive(-p2 + p3)) - \
T3*onPositive(-p2 + p3)*onPositive(-(qm32Neg*onNegative(-p2 + p3)) + \
qm32Pos*onPositive(-p2 + p3)));
          jacobianMatrix[4][3] = cp*onNegative(-p2 + \
p3)*(T2*onNegative(-(qm32Neg*onNegative(-p2 + p3)) + qm32Pos*onPositive(-p2 + \
p3)) + T3*onPositive(-(qm32Neg*onNegative(-p2 + p3)) + qm32Pos*onPositive(-p2 \
+ p3)));
          jacobianMatrix[4][4] = 1;
          jacobianMatrix[4][5] = 0;
          jacobianMatrix[4][6] = 0;
          jacobianMatrix[4][7] = 0;
          jacobianMatrix[4][8] = 0;
          jacobianMatrix[4][9] = 0;
          jacobianMatrix[5][0] = cp*onPositive(p1 - \
p2)*(T2*onNegative(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2)) + T1*onPositive(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2)));
          jacobianMatrix[5][1] = -(cp*onNegative(p1 - \
p2)*(T2*onNegative(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2)) + T1*onPositive(-(qm12Neg*onNegative(p1 - p2)) + qm12Pos*onPositive(p1 - \
p2))));
          jacobianMatrix[5][2] = 0;
          jacobianMatrix[5][3] = 0;
          jacobianMatrix[5][4] = 0;
          jacobianMatrix[5][5] = 1;
          jacobianMatrix[5][6] = 0;
          jacobianMatrix[5][7] = 0;
          jacobianMatrix[5][8] = 0;
          jacobianMatrix[5][9] = 0;
          jacobianMatrix[6][0] = 0;
          jacobianMatrix[6][1] = 0;
          jacobianMatrix[6][2] = cp*onPositive(-p2 + \
p3)*(T2*onNegative(-(qm32Neg*onNegative(-p2 + p3)) + qm32Pos*onPositive(-p2 + \
p3)) + T3*onPositive(-(qm32Neg*onNegative(-p2 + p3)) + qm32Pos*onPositive(-p2 \
+ p3)));
          jacobianMatrix[6][3] = -(cp*onNegative(-p2 + \
p3)*(T2*onNegative(-(qm32Neg*onNegative(-p2 + p3)) + qm32Pos*onPositive(-p2 + \
p3)) + T3*onPositive(-(qm32Neg*onNegative(-p2 + p3)) + qm32Pos*onPositive(-p2 \
+ p3))));
          jacobianMatrix[6][4] = 0;
          jacobianMatrix[6][5] = 0;
          jacobianMatrix[6][6] = 1;
          jacobianMatrix[6][7] = 0;
          jacobianMatrix[6][8] = 0;
          jacobianMatrix[6][9] = 0;
          jacobianMatrix[7][0] = 0;
          jacobianMatrix[7][1] = 0;
          jacobianMatrix[7][2] = 0;
          jacobianMatrix[7][3] = 0;
          jacobianMatrix[7][4] = -Zc2;
          jacobianMatrix[7][5] = 0;
          jacobianMatrix[7][6] = 0;
          jacobianMatrix[7][7] = 1;
          jacobianMatrix[7][8] = 0;
          jacobianMatrix[7][9] = 0;
          jacobianMatrix[8][0] = 0;
          jacobianMatrix[8][1] = 0;
          jacobianMatrix[8][2] = 0;
          jacobianMatrix[8][3] = 0;
          jacobianMatrix[8][4] = 0;
          jacobianMatrix[8][5] = -Zc1;
          jacobianMatrix[8][6] = 0;
          jacobianMatrix[8][7] = 0;
          jacobianMatrix[8][8] = 1;
          jacobianMatrix[8][9] = 0;
          jacobianMatrix[9][0] = 0;
          jacobianMatrix[9][1] = 0;
          jacobianMatrix[9][2] = 0;
          jacobianMatrix[9][3] = 0;
          jacobianMatrix[9][4] = 0;
          jacobianMatrix[9][5] = 0;
          jacobianMatrix[9][6] = -Zc3;
          jacobianMatrix[9][7] = 0;
          jacobianMatrix[9][8] = 0;
          jacobianMatrix[9][9] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          qm12Pos=stateVark[0];
          qm12Neg=stateVark[1];
          qm32Pos=stateVark[2];
          qm32Neg=stateVark[3];
          dE2=stateVark[4];
          dE1=stateVark[5];
          dE3=stateVark[6];
          p2=stateVark[7];
          p1=stateVark[8];
          p3=stateVark[9];
        //Expressions
        qm2 = -(qm12Neg*onNegative(p1 - p2)) - qm32Neg*onNegative(-p2 + p3) + \
qm12Pos*onPositive(p1 - p2) + qm32Pos*onPositive(-p2 + p3);
        qm1 = qm12Neg*onNegative(p1 - p2) - qm12Pos*onPositive(p1 - p2);
        qm3 = qm32Neg*onNegative(-p2 + p3) - qm32Pos*onPositive(-p2 + p3);
        Ng32e = onPositive(-p2 + p3)*(onNegative(-Bf + p2/p3) + \
onPositive(-Bf + p2/p3)*signedSquareL(1 - Power(-Bf + p2/p3,2)/Power(1 - \
Bf,2),eps)) + onNegative(-p2 + p3)*(onNegative(-Bf + p3/p2) + onPositive(-Bf \
+ p3/p2)*signedSquareL(1 - Power(-Bf + p3/p2,2)/Power(1 - Bf,2),eps));
        Ng12e = onNegative(p1 - p2)*(onNegative(-Bf + p1/p2) + onPositive(-Bf \
+ p1/p2)*signedSquareL(1 - Power(-Bf + p1/p2,2)/Power(1 - Bf,2),eps)) + \
onPositive(p1 - p2)*(onNegative(-Bf + p2/p1) + onPositive(-Bf + \
p2/p1)*signedSquareL(1 - Power(-Bf + p2/p1,2)/Power(1 - Bf,2),eps));
        }

        //Calculate the delayed parts

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];
        delayedPart[8][1] = delayParts8[1];
        delayedPart[9][1] = delayParts9[1];
        delayedPart[10][1] = delayParts10[1];

        //Write new values to nodes
        //Port P1
        (*mpP_p1)=p1;
        (*mpP_qm1)=qm1;
        (*mpP_dE1)=dE1;
        //Port P2
        (*mpP_p2)=p2;
        (*mpP_qm2)=qm2;
        (*mpP_dE2)=dE2;
        //Port P3
        (*mpP_p3)=p3;
        (*mpP_qm3)=qm3;
        (*mpP_dE3)=dE3;
        //outputVariables
        (*mpqm12Pos)=qm12Pos;
        (*mpqm12Neg)=qm12Neg;
        (*mpqm32Pos)=qm32Pos;
        (*mpqm32Neg)=qm32Neg;
        (*mpNg32e)=Ng32e;
        (*mpNg12e)=Ng12e;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // PNEUMATICVALVE33_HPP_INCLUDED
