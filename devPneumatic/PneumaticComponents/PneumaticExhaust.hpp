#ifndef PNEUMATICEXHAUST_HPP_INCLUDED
#define PNEUMATICEXHAUST_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file PneumaticExhaust.hpp
//! @author Petter Krus <petter.krus@liu.se>
//  co-author/auditor **Not yet audited by a second person**
//! @date Tue 28 Jul 2020 19:02:51
//! @brief Exhaust to ambient air
//! @ingroup PneumaticComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, H:, PettersDropbox, Dropbox, HopsanComponents, PneumaticDevelop, \
PneumaticComponents}/PneumaticExhaust.nb*/

using namespace hopsan;

class PneumaticExhaust : public ComponentC
{
private:
     Port *mpP1;
     int mNstep;
     //Port P1 variable
     double p1;
     double qm1;
     double T1;
     double dE1;
     double c1;
     double Zc1;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double p0;
     double T0;
     //outputVariables
     //Expressions variables
     //Port P1 pointer
     double *mpP_p1;
     double *mpP_qm1;
     double *mpP_T1;
     double *mpP_dE1;
     double *mpP_c1;
     double *mpP_Zc1;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpp0;
     double *mpT0;
     //inputParameters pointers
     //outputVariables pointers
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new PneumaticExhaust();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;

        //Add ports to the component
        mpP1=addPowerPort("P1","NodePneumatic");
        //Add inputVariables to the component
            addInputVariable("p0","Pressure","Pa",100000.,&mpp0);
            addInputVariable("T0","Input temperature","K",293.,&mpT0);

        //Add inputParammeters to the component
        //Add outputVariables to the component

//==This code has been autogenerated using Compgen==
        //Add constantParameters
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port P1
        mpP_p1=getSafeNodeDataPtr(mpP1, NodePneumatic::Pressure);
        mpP_qm1=getSafeNodeDataPtr(mpP1, NodePneumatic::MassFlow);
        mpP_T1=getSafeNodeDataPtr(mpP1, NodePneumatic::Temperature);
        mpP_dE1=getSafeNodeDataPtr(mpP1, NodePneumatic::EnergyFlow);
        mpP_c1=getSafeNodeDataPtr(mpP1, NodePneumatic::WaveVariable);
        mpP_Zc1=getSafeNodeDataPtr(mpP1, NodePneumatic::CharImpedance);

        //Read variables from nodes
        //Port P1
        p1 = (*mpP_p1);
        qm1 = (*mpP_qm1);
        T1 = (*mpP_T1);
        dE1 = (*mpP_dE1);
        c1 = (*mpP_c1);
        Zc1 = (*mpP_Zc1);

        //Read inputVariables from nodes
        p0 = (*mpp0);
        T0 = (*mpT0);

        //Read inputParameters from nodes

        //Read outputVariables from nodes

//==This code has been autogenerated using Compgen==


        //Initialize delays


        simulateOneTimestep();

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes
        //Port P1
        p1 = (*mpP_p1);
        qm1 = (*mpP_qm1);
        dE1 = (*mpP_dE1);

        //Read inputVariables from nodes
        p0 = (*mpp0);
        T0 = (*mpT0);

        //Read inputParameters from nodes

        //LocalExpressions

        //Expressions
        c1 = p0;
        T1 = T0;
        Zc1 = 0.;

        //Calculate the delayed parts


        //Write new values to nodes
        //Port P1
        (*mpP_T1)=T1;
        (*mpP_c1)=c1;
        (*mpP_Zc1)=Zc1;
        //outputVariables

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // PNEUMATICEXHAUST_HPP_INCLUDED
